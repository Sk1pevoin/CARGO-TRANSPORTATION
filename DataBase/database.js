class TransportDatabase {
    constructor() {
        this.dbName = 'CARGO-TRANSPORTATION.db';
        this.init();
    }

    init() {
        // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (!localStorage.getItem('transport_db_initialized')) {
            this.initializeData();
        }
    }

    initializeData() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const initialData = {
            bids: [],
            client_auth: [],
            contacts: [],
            drivers: [],
            trucks: []
        };
        
        localStorage.setItem('transport_data', JSON.stringify(initialData));
        localStorage.setItem('transport_db_initialized', 'true');
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    getData(tableName) {
        const data = JSON.parse(localStorage.getItem('transport_data') || '{}');
        return data[tableName] || [];
    }

    setData(tableName, data) {
        const allData = JSON.parse(localStorage.getItem('transport_data') || '{}');
        allData[tableName] = data;
        localStorage.setItem('transport_data', JSON.stringify(allData));
    }

    // üìù –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–Ø–í–ö–ê–ú–ò (bid)
    async addBid(bidData) {
        return new Promise((resolve) => {
            const bids = this.getData('bids');
            const newBid = {
                id: Date.now(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ ID
                name: bidData.name,
                wherefrom: bidData.wherefrom,
                towhere: bidData.towhere,
                status: '–Ω–æ–≤–∞—è',
                date: new Date().toLocaleDateString()
            };
            
            bids.push(newBid);
            this.setData('bids', bids);
            resolve(newBid);
        });
    }

    async getAllBids() {
        return new Promise((resolve) => {
            const bids = this.getData('bids');
            resolve(bids);
        });
    }

    async updateBidStatus(id, newStatus) {
        return new Promise((resolve) => {
            const bids = this.getData('bids');
            const bidIndex = bids.findIndex(bid => bid.id == id);
            
            if (bidIndex !== -1) {
                bids[bidIndex].status = newStatus;
                this.setData('bids', bids);
                resolve({ success: true });
            } else {
                resolve({ success: false });
            }
        });
    }

    // üîê –ú–ï–¢–û–î–´ –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (client_auth)
    async registerUser(authData) {
        return new Promise((resolve, reject) => {
            const users = this.getData('client_auth');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
            const existingUser = users.find(user => user.login === authData.login);
            if (existingUser) {
                reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));
                return;
            }
            
            const newUser = {
                id: Date.now(),
                login: authData.login,
                password: authData.password
            };
            
            users.push(newUser);
            this.setData('client_auth', users);
            resolve(newUser);
        });
    }

    async loginUser(login, password) {
        return new Promise((resolve) => {
            const users = this.getData('client_auth');
            const user = users.find(u => u.login === login && u.password === password);
            resolve(user || null);
        });
    }

    // üìû –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í (contacts)
    async addContact(contactData) {
        return new Promise((resolve) => {
            const contacts = this.getData('contacts');
            const newContact = {
                id: Date.now(),
                phone: contactData.phone,
                email: contactData.email
            };
            
            contacts.push(newContact);
            this.setData('contacts', contacts);
            resolve(newContact);
        });
    }

    async getAllContacts() {
        return new Promise((resolve) => {
            const contacts = this.getData('contacts');
            resolve(contacts);
        });
    }

    // üöõ –ú–ï–¢–û–î–´ –î–õ–Ø –ì–†–£–ó–û–í–ò–ö–û–í (trucks)
    async addTruck(truckData) {
        return new Promise((resolve) => {
            const trucks = this.getData('trucks');
            const newTruck = {
                id: Date.now(),
                model: truckData.model,
                license_plate: truckData.license_plate,
                capacity_kg: truckData.capacity_kg,
                status: 'available'
            };
            
            trucks.push(newTruck);
            this.setData('trucks', trucks);
            resolve(newTruck);
        });
    }

    async getAllTrucks() {
        return new Promise((resolve) => {
            const trucks = this.getData('trucks');
            resolve(trucks);
        });
    }

    // üë®‚Äçüíº –ú–ï–¢–û–î–´ –î–õ–Ø –í–û–î–ò–¢–ï–õ–ï–ô (drivers)
    async addDriver(driverData) {
        return new Promise((resolve) => {
            const drivers = this.getData('drivers');
            const newDriver = {
                id: Date.now(),
                name: driverData.name,
                phone: driverData.phone,
                license_number: driverData.license_number,
                status: 'available'
            };
            
            drivers.push(newDriver);
            this.setData('drivers', drivers);
            resolve(newDriver);
        });
    }

    async getAllDrivers() {
        return new Promise((resolve) => {
            const drivers = this.getData('drivers');
            resolve(drivers);
        });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const transportDB = new TransportDatabase();